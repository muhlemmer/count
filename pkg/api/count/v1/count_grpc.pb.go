// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: count/v1/count.proto

package countv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CountServiceClient is the client API for CountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CountServiceClient interface {
	// Add datapoints for request counting, over a streaming RPC.
	// Datapoints are stored asynchronous, to prevent blocking at the client side.
	// The stream is terminated by the server after the first error,
	// which might result in some datapoints not being stored.
	Add(ctx context.Context, opts ...grpc.CallOption) (CountService_AddClient, error)
}

type countServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCountServiceClient(cc grpc.ClientConnInterface) CountServiceClient {
	return &countServiceClient{cc}
}

func (c *countServiceClient) Add(ctx context.Context, opts ...grpc.CallOption) (CountService_AddClient, error) {
	stream, err := c.cc.NewStream(ctx, &CountService_ServiceDesc.Streams[0], "/count.v1.CountService/Add", opts...)
	if err != nil {
		return nil, err
	}
	x := &countServiceAddClient{stream}
	return x, nil
}

type CountService_AddClient interface {
	Send(*AddRequest) error
	CloseAndRecv() (*AddResponse, error)
	grpc.ClientStream
}

type countServiceAddClient struct {
	grpc.ClientStream
}

func (x *countServiceAddClient) Send(m *AddRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *countServiceAddClient) CloseAndRecv() (*AddResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CountServiceServer is the server API for CountService service.
// All implementations must embed UnimplementedCountServiceServer
// for forward compatibility
type CountServiceServer interface {
	// Add datapoints for request counting, over a streaming RPC.
	// Datapoints are stored asynchronous, to prevent blocking at the client side.
	// The stream is terminated by the server after the first error,
	// which might result in some datapoints not being stored.
	Add(CountService_AddServer) error
	mustEmbedUnimplementedCountServiceServer()
}

// UnimplementedCountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCountServiceServer struct {
}

func (UnimplementedCountServiceServer) Add(CountService_AddServer) error {
	return status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCountServiceServer) mustEmbedUnimplementedCountServiceServer() {}

// UnsafeCountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CountServiceServer will
// result in compilation errors.
type UnsafeCountServiceServer interface {
	mustEmbedUnimplementedCountServiceServer()
}

func RegisterCountServiceServer(s grpc.ServiceRegistrar, srv CountServiceServer) {
	s.RegisterService(&CountService_ServiceDesc, srv)
}

func _CountService_Add_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CountServiceServer).Add(&countServiceAddServer{stream})
}

type CountService_AddServer interface {
	SendAndClose(*AddResponse) error
	Recv() (*AddRequest, error)
	grpc.ServerStream
}

type countServiceAddServer struct {
	grpc.ServerStream
}

func (x *countServiceAddServer) SendAndClose(m *AddResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *countServiceAddServer) Recv() (*AddRequest, error) {
	m := new(AddRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CountService_ServiceDesc is the grpc.ServiceDesc for CountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "count.v1.CountService",
	HandlerType: (*CountServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Add",
			Handler:       _CountService_Add_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "count/v1/count.proto",
}
