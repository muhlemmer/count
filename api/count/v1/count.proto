syntax = "proto3";

package count.v1;

import "google/protobuf/timestamp.proto";
import "google/type/date.proto";

// Method defines all HTTP standard method types.
// GRPC value can be used when a request is received
// over a gRPC connection.
// buf:lint:ignore ENUM_VALUE_PREFIX
enum Method {
  METHOD_UNSPECIFIED = 0;
    
  // HTTP request methods
  CONNECT = 1;
  DELETE = 2;
  GET = 3;
  HEAD = 4;
  OPTIONS = 5;
  POST = 6;
  PUT = 7;
  TRACE = 8;
  
  // gRPC requests
  GRPC = 100;
}

// AddRequest is a datapoint for request counting.
message AddRequest {
  // Method of the request can be a HTTP method or GRPC.
  Method method = 1;
  
  // Path of the request, or name of the gRPC method.
  // This value is required.
  string path = 2;

  // Timestamp of the request, using the server's wall clock.
  // This value is required.
  google.protobuf.Timestamp request_timestamp = 3;
}

message AddResponse {}

// CountDailyTotalsRequest determines data points
// to be counted.
message CountDailyTotalsRequest {
  // date which each timestamp should be part of.
  google.type.Date date = 1;
}

// MethodCount gives a request count for a method and path pair.
message MethodCount {
  // Method of the request can be a HTTP method or GRPC.
  Method method = 1;
  
  // Path of the request, or name of the gRPC method.
  string path = 2;

  // Amount of times each method and path pair was requested.
  int32 count = 3;

  // Date of the counted requests.
  google.type.Date date = 4;
}

// CountDailyTotalsResponse returns the method and path pair
// request counts for the requested date.
message CountDailyTotalsResponse {
  repeated MethodCount method_counts = 1;
}

// ListDailyTotalsRequest describes an time interval,
// between which records are returned.
// The timestamps are rounded down to whole days.
// So hours, minutes, seconds etc are discarded.
message ListDailyTotalsRequest {
  // start date of the interval, inclusive.
  google.type.Date start_date = 1;

  // end date of the time interval, inclusive.
  google.type.Date end_date = 2;
}

message ListDailyTotalsResponse {
  repeated MethodCount method_counts = 1;
}

service CountService {
  // Add datapoints for request counting, over a streaming RPC.
  // Datapoints are stored asynchronous, to prevent blocking at the client side.
  // The stream is terminated by the server after the first error,
  // which might result in some datapoints not being stored.
  rpc Add(stream AddRequest) returns (AddResponse) {}

  // CountDailyTotals triggers a count of daily requests.
  // Request entries for specified date are deleted, while being counted against
  // method and path pairs.
  // This method is meant to be called once a day in a cron-like job.
  // Repeated calls for the same date will not overwrite existing counts,
  // and may fail if additional request entries are found for a method and path pair.
  rpc CountDailyTotals(CountDailyTotalsRequest) returns (CountDailyTotalsResponse) {}

  // ListDailyTotals returns a list of daily counts for each method and path pair.
  // Only entries which are previously created by CountDailyTotals can be returned.
  // When the requested interval does not result in any entries,
  // a NotFound error will be returned.
  rpc ListDailyTotals(ListDailyTotalsRequest) returns (ListDailyTotalsResponse) {}
}